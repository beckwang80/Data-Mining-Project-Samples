{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fnil\fcharset0 LucidaGrande;\f1\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red235\green235\blue235;
\red83\green83\blue83;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl336\sa240\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 R codes for Data Preparation and Exploratory Data Analysis\cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb4 TexturePred <- Texture[,-41]\
TextureClass <- Texture[,41]\
PCTexture <- princomp(TexturePred, cor=T)\
screeplot(PCTexture, col=c("royal blue","blue","dark blue","light blue", "purple","grey"))\
summary(PCTexture)\
par(mfrow=c(1,10), oma = c(1,1,0,0) + 0.1, mar = c(3,3,1,1) + 0.1)\
for (i in 1:10) \{\
boxplot(TexturePred[,i], pch=19, col="moccasin")\
mtext("Boxplots of A1 - A10", cex=0.8, side=1, line=0, outer=T)\
\}\
for (i in 11:20) \{\
boxplot(TexturePred[,i], pch=19, col="aliceblue")\
mtext("Boxplots of A11 - A20", cex=0.8, side=1, line=0, outer=T)\
\}\
for (i in 21:30) \{\
boxplot(TexturePred[,i], pch=19, col="bisque1")\
mtext("Boxplots of A21 - A30", cex=0.8, side=1, line=0, outer=T)\
\}\
for (i in 31:40) \{\
boxplot(TexturePred[,i], pch=19, col="lightblue1")\
mtext("Boxplots of A31 - A40", cex=0.8, side=1, line=0, outer=T)\
\}\
\'a0\
DescTex <- describe(TexturePred)\
Qm <- matrix(0, nrow(DescTex), 3)\
DescTex <- cbind(DescTex, Qm)\
for (i in 1:nrow(DescTex))\{\
DescTex[i,14] <- quantile(TexturePred[,i], 0.25)\
DescTex[i,15] <- quantile(TexturePred[,i], 0.75)\
DescTex[i,16] <- DescTex[i,15]-DescTex[i,14]\
\}\
write.csv(DescTex, "C:/Users/sbasu/Desktop/Stat 897D/DescTex.csv")\
\'a0\
######### Outlier rejection ##############\
\'a0\
limoutL <- rep(0,40)\
limoutU <- rep(0,40)\
for (i in 1:40)\{\
t1 <- quantile(TexturePred[,i], 0.75)\
t2 <- quantile(TexturePred[,i], 0.25)\
t3 <- IQR(TexturePred[,i])\
limoutU[i] <- t1 + 3*t3\
limoutL[i] <- t2 - 3*t3\
\}\
TxPrdIndexU <- matrix(0, 5500, 40)\
TxPrdIndexL <- matrix(0, 5500, 40)\
for (i in 1:5500)\
for (j in 1:40)\{\
if (TexturePred[i,j] > limoutU[j]) TxPrdIndexU[i,j] <- 1\
if (TexturePred[i,j] < limoutL[j]) TxPrdIndexL[i,j] <- 1\
\}\
TxIndU <- apply(TxPrdIndexU, 1, sum)\
TxIndL <- apply(TxPrdIndexL, 1, sum)\
TxInd <- TxIndU + TxIndL\
TxPrdTemp <- cbind(TxInd, TexturePred)\
\'a0\
Indexes <- rep(0, 128)\
j <- 1\
for (i in 1:5500)\{\
if (TxInd[i] > 0) \{Indexes[j]<- i\
j <- j + 1\}\
else j <- j\
\}\
TxPredLib <- TexturePred[-Indexes,]  # Inside of Q3+3IQR Predictors\
TxClassLib <- TextureClass[-Indexes]  # Inside of Q3+3IQR the class column\
############ Correlation #############\
TexturePredCor <- cor(TxPredLib)\
write.csv(TexturePredCor, "C:/Users/sbasu/Desktop/Stat 897D/CorrTex.csv")\
\
\pard\pardeftab720\sl336\sa240\partightenfactor0

\f0 \cf2 \cb3 R codes forPrincipal Component Analysis\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb4 PCTexture <- prcomp(TxPredLib, scale=T)\
print(PCTexture)\
summary(PCTexture)\
\'a0\
par(mfrow=c(1,1), oma = c(1,1,0,0) + 0.1, mar = c(3,3,1,1) + 0.1)\
\'a0\
plot(PCTexture, type="line", col=c("dark blue"), main="", pch=19) ## Scree plot\
mtext("Screeplot of Texture", side=1, line=3, cex=0.8)\
\'a0\
biplot(PCTexture, pch=19, cex=0.6, col=c("olivedrab1", "blue"))\
\'a0\
TextureScore <- PCTexture$x[,1:8]\
\'a0\
TextureMasterPCScore <- cbind(TextureScore, TxClassLib)\
# Used for model fitting and 10-fold cross-validation\
\
\
\pard\pardeftab720\sl336\sa240\partightenfactor0

\f0 \cf2 \cb3 R codes for Cross-Validation\
\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb4 ########### Creating Cross-validation Dataset  ###########################\
\'a0\
CVInd <- sample.int(5372, 5372, replace=FALSE)\
CVInds <- CVInd[1:4833]\
dim(CVInds) <- c(537,9)\
CVInds10 <- CVInd[4834:5372]\
\'a0\
TXTrain1 <- TextureMasterPCScore[-CVInds[,1],] # Training Set 1\
TXTest1  <- TextureMasterPCScore[CVInds[,1],]  # Test Set 1\
\'a0\
TXTrain2 <- TextureMasterPCScore[-CVInds[,2],] # Training Set 2\
TXTest2  <- TextureMasterPCScore[CVInds[,2],]  # Test Set 2\
\'a0\
TXTrain3 <- TextureMasterPCScore[-CVInds[,3],] # Training Set 3\
TXTest3 <- TextureMasterPCScore[CVInds[,3],]  # Test Set 3\
\'a0\
TXTrain4<- TextureMasterPCScore[-CVInds[,4],] # Training Set 4\
TXTest4 <- TextureMasterPCScore[CVInds[,4],]  # Test Set 4\
\'a0\
TXTrain5<- TextureMasterPCScore[-CVInds[,5],] # Training Set 5\
TXTest5 <- TextureMasterPCScore[CVInds[,5],]  # Test Set 5\
\'a0\
TXTrain6<- TextureMasterPCScore[-CVInds[,6],] # Training Set 6\
TXTest6 <- TextureMasterPCScore[CVInds[,6],]  # Test Set 6\
\'a0\
TXTrain7<- TextureMasterPCScore[-CVInds[,7],] # Training Set 7\
TXTest7 <- TextureMasterPCScore[CVInds[,7],]  # Test Set 7\
\'a0\
TXTrain8 <- TextureMasterPCScore[-CVInds[,8],] # Training Set 8\
TXTest8 <- TextureMasterPCScore[CVInds[,8],]  # Test Set 8\
\'a0\
TXTrain9 <- TextureMasterPCScore[-CVInds[,9],] # Training Set 9\
TXTest9 <- TextureMasterPCScore[CVInds[,9],]  # Test Set 9\
\'a0\
TXTrain10 <- TextureMasterPCScore[-CVInds10,] # Training Set 10\
TXTest10  <- TextureMasterPCScore[CVInds10,]  # Test Set 10\
\'a0\
TextureMasterPCScore <- as.data.frame(TextureMasterPCScore)\
\'a0\
TextureMasterPCScore$TxClassLib <- as.factor(TextureMasterPCScore$TxClassLib)\
prop.table(table(TextureMasterPCScore$TxClassLib))\
prop.table(table(TXTrain1$TxClassLib))\
prop.table(table(TXTrain2$TxClassLib))\
prop.table(table(TXTrain3$TxClassLib))\
prop.table(table(TXTrain4$TxClassLib))\
prop.table(table(TXTrain5$TxClassLib))\
prop.table(table(TXTrain6$TxClassLib))\
prop.table(table(TXTrain7$TxClassLib))\
prop.table(table(TXTrain8$TxClassLib))\
prop.table(table(TXTrain9$TxClassLib))\
prop.table(table(TXTrain10$TxClassLib))\
\
\pard\pardeftab720\sl336\sa240\partightenfactor0

\f0 \cf2 \cb3 R codes for Discriminant Analysis\
\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb4 ldafit4 <-lda(TxClassLib ~ ., data=TXTrain4)\
# ldafit4\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4 lda.pred4 <- predict(ldafit4, data=TXTrain4)\
tab4 <- table(lda.pred4$class, TXTrain4$TxClassLib)\
propmisTrain4 <- 1 - tr(tab4)/length(lda.pred4$class)\
cat("Proportion of Misclassification in Training Set 4:", propmisTrain4)\
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4 lda.Testpred4 <- predict(ldafit4, TXTest4)\
testtab4 <- table(lda.Testpred4$class, TXTest4$TxClassLib)\
propmisTest4 <- 1-tr(testtab4)/length(lda.Testpred4$class)\
cat("Proportion of Misclassification in Test Set 4:", propmisTest4)\
\
\pard\pardeftab720\sl336\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://onlinecourses.science.psu.edu/stat857/node/236#TB_inline?height=500&width=700&inlineId=myOnPageContent6"}}{\fldrslt 
\f0 \cf5 \cb3 \strokec5 R codes for Tree Based Algorithms}}
\f0 \cb3 \
\
\pard\pardeftab720\sl360\partightenfactor0

\f1 \cf2 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb4 TXTrain1$TxClassLib <- as.factor(TXTrain1$TxClassLib)\
TXTrainTree1 <- tree(TxClassLib ~ ., data=TXTrain1, method="class")\
\'a0\
plot(TXTrainTree1, col="dark red")\
text(TXTrainTree1, pretty=0, cex=0.6, col="dark red")\
mtext("Decision Tree (Unpruned) for Training Set 1", side=3, line = 2, cex=0.8, col="dark red")\
\'a0\
m <- misclass.tree(TXTrainTree1)\
propmisTrain1 <- m / length(TXTrainTree1$y)\
cat("Proportion of Misclassification in Training Set 1:", propmisTrain1)\
\'a0\
TXTest1Treefit1 <- predict(TXTrainTree1, TXTest1, type="class")\
Tab1 <- table(TXTest1Treefit1, TXTest1$TxClassLib)\
\'a0\
propmisTest1 <- 1-tr(Tab1)/length(TXTest1Treefit1)\
cat("Proportion of Misclassification in Test Set 1 =", propmisTest1)\
\'a0\
TXTrainPruneTree1 <- prune.misclass(TXTrainTree1, best=20)\
m <- misclass.tree(TXTrainPruneTree1)\
m / length(TXTrainPruneTree1$y)\
\'a0\
plot(TXTrainPruneTree1, col="dark red")\
text(TXTrainPruneTree1, pretty=0, cex=0.6, col="dark red")\
mtext("Decision Tree for Training Set 1", side=3, line = 2, cex=0.8, col="dark red")\
\'a0\
TXTest1PruneTreefit1 <- predict(TXTrainPruneTree1, TXTest1, type="class")\
Tab1 <- table(TXTest1PruneTreefit1, TXTest1$TxClassLib)\
\'a0\
propmisTest1 <- 1-tr(Tab1)/length(TXTest1PruneTreefit1)\
cat("Proportion of Misclassification in Test Set 1 =", propmisTest1)\
\'a0\
################### Random Forest ###################\
\'a0\
TXTrainRF1 <- randomForest(TXTrain1[,1:8],TXTrain1[,9], ntree=100, importance=T, proximity=T)\
# TXTrainRF1 <- randomForest(TXTrain1[,1:8],TXTrain1[,9], xtest=TXTest1[,1:8], ytest=TXTest1[,9], ntree=100, importance=T, proximity=T)\
plot(TXTrainRF1, main="OOB Error Rate: Set 1", cex=0.4)\
TXTrainRF1\
varImpPlot(TXTrainRF1,  pch=19, col="dark red", main="Variable Importance: Set 1", cex=0.8)\
\
}